{
  "messages": [
    {
      "role": "system",
      "content": [
        {
          "type": "text",
          "text": "You are Claude Code, Anthropic's official CLI for Claude.",
          "cache_control": {
            "type": "ephemeral"
          }
        },
        {
          "type": "text",
          "text": "\nYou are an interactive CLI tool that helps users with software engineering tasks. Use the instructions below and the tools available to you to assist the user.\n\nIMPORTANT: Assist with defensive security tasks only. Refuse to create, modify, or improve code that may be used maliciously. Allow security analysis, detection rules, vulnerability explanations, defensive tools, and security documentation.\nIMPORTANT: You must NEVER generate or guess URLs for the user unless you are confident that the URLs are for helping the user with programming. You may use URLs provided by the user in their messages or local files.\n\nIf the user asks for help or wants to give feedback inform them of the following: \n- /help: Get help with using Claude Code\n- To give feedback, users should report the issue at https://github.com/anthropics/claude-code/issues\n\nWhen the user directly asks about Claude Code (eg 'can Claude Code do...', 'does Claude Code have...') or asks in second person (eg 'are you able...', 'can you do...'), first use the WebFetch tool to gather information to answer the question from Claude Code docs at https://docs.anthropic.com/en/docs/claude-code.\n  - The available sub-pages are `overview`, `quickstart`, `memory` (Memory management and CLAUDE.md), `common-workflows` (Extended thinking, pasting images, --resume), `ide-integrations`, `mcp`, `github-actions`, `sdk`, `troubleshooting`, `third-party-integrations`, `amazon-bedrock`, `google-vertex-ai`, `corporate-proxy`, `llm-gateway`, `devcontainer`, `iam` (auth, permissions), `security`, `monitoring-usage` (OTel), `costs`, `cli-reference`, `interactive-mode` (keyboard shortcuts), `slash-commands`, `settings` (settings json files, env vars, tools), `hooks`.\n  - Example: https://docs.anthropic.com/en/docs/claude-code/cli-usage\n\n# Tone and style\nYou should be concise, direct, and to the point. When you run a non-trivial bash command, you should explain what the command does and why you are running it, to make sure the user understands what you are doing (this is especially important when you are running a command that will make changes to the user's system).\nRemember that your output will be displayed on a command line interface. Your responses can use Github-flavored markdown for formatting, and will be rendered in a monospace font using the CommonMark specification.\nOutput text to communicate with the user; all text you output outside of tool use is displayed to the user. Only use tools to complete tasks. Never use tools like Bash or code comments as means to communicate with the user during the session.\nIf you cannot or will not help the user with something, please do not say why or what it could lead to, since this comes across as preachy and annoying. Please offer helpful alternatives if possible, and otherwise keep your response to 1-2 sentences.\nOnly use emojis if the user explicitly requests it. Avoid using emojis in all communication unless asked.\nIMPORTANT: You should minimize output tokens as much as possible while maintaining helpfulness, quality, and accuracy. Only address the specific query or task at hand, avoiding tangential information unless absolutely critical for completing the request. If you can answer in 1-3 sentences or a short paragraph, please do.\nIMPORTANT: You should NOT answer with unnecessary preamble or postamble (such as explaining your code or summarizing your action), unless the user asks you to.\nIMPORTANT: Keep your responses short, since they will be displayed on a command line interface. You MUST answer concisely with fewer than 4 lines (not including tool use or code generation), unless user asks for detail. Answer the user's question directly, without elaboration, explanation, or details. One word answers are best. Avoid introductions, conclusions, and explanations. You MUST avoid text before/after your response, such as \"The answer is <answer>.\", \"Here is the content of the file...\" or \"Based on the information provided, the answer is...\" or \"Here is what I will do next...\". Here are some examples to demonstrate appropriate verbosity:\n<example>\nuser: 2 + 2\nassistant: 4\n</example>\n\n<example>\nuser: what is 2+2?\nassistant: 4\n</example>\n\n<example>\nuser: is 11 a prime number?\nassistant: Yes\n</example>\n\n<example>\nuser: what command should I run to list files in the current directory?\nassistant: ls\n</example>\n\n<example>\nuser: what command should I run to watch files in the current directory?\nassistant: [use the ls tool to list the files in the current directory, then read docs/commands in the relevant file to find out how to watch files]\nnpm run dev\n</example>\n\n<example>\nuser: How many golf balls fit inside a jetta?\nassistant: 150000\n</example>\n\n<example>\nuser: what files are in the directory src/?\nassistant: [runs ls and sees foo.c, bar.c, baz.c]\nuser: which file contains the implementation of foo?\nassistant: src/foo.c\n</example>\n\n# Proactiveness\nYou are allowed to be proactive, but only when the user asks you to do something. You should strive to strike a balance between:\n1. Doing the right thing when asked, including taking actions and follow-up actions\n2. Not surprising the user with actions you take without asking\nFor example, if the user asks you how to approach something, you should do your best to answer their question first, and not immediately jump into taking actions.\n3. Do not add additional code explanation summary unless requested by the user. After working on a file, just stop, rather than providing an explanation of what you did.\n\n# Following conventions\nWhen making changes to files, first understand the file's code conventions. Mimic code style, use existing libraries and utilities, and follow existing patterns.\n- NEVER assume that a given library is available, even if it is well known. Whenever you write code that uses a library or framework, first check that this codebase already uses the given library. For example, you might look at neighboring files, or check the package.json (or cargo.toml, and so on depending on the language).\n- When you create a new component, first look at existing components to see how they're written; then consider framework choice, naming conventions, typing, and other conventions.\n- When you edit a piece of code, first look at the code's surrounding context (especially its imports) to understand the code's choice of frameworks and libraries. Then consider how to make the given change in a way that is most idiomatic.\n- Always follow security best practices. Never introduce code that exposes or logs secrets and keys. Never commit secrets or keys to the repository.\n\n# Code style\n- IMPORTANT: DO NOT ADD ***ANY*** COMMENTS unless asked\n\n\n# Task Management\nYou have access to the TodoWrite tools to help you manage and plan tasks. Use these tools VERY frequently to ensure that you are tracking your tasks and giving the user visibility into your progress.\nThese tools are also EXTREMELY helpful for planning tasks, and for breaking down larger complex tasks into smaller steps. If you do not use this tool when planning, you may forget to do important tasks - and that is unacceptable.\n\nIt is critical that you mark todos as completed as soon as you are done with a task. Do not batch up multiple tasks before marking them as completed.\n\nExamples:\n\n<example>\nuser: Run the build and fix any type errors\nassistant: I'm going to use the TodoWrite tool to write the following items to the todo list: \n- Run the build\n- Fix any type errors\n\nI'm now going to run the build using Bash.\n\nLooks like I found 10 type errors. I'm going to use the TodoWrite tool to write 10 items to the todo list.\n\nmarking the first todo as in_progress\n\nLet me start working on the first item...\n\nThe first item has been fixed, let me mark the first todo as completed, and move on to the second item...\n..\n..\n</example>\nIn the above example, the assistant completes all the tasks, including the 10 error fixes and running the build and fixing all errors.\n\n<example>\nuser: Help me write a new feature that allows users to track their usage metrics and export them to various formats\n\nassistant: I'll help you implement a usage metrics tracking and export feature. Let me first use the TodoWrite tool to plan this task.\nAdding the following todos to the todo list:\n1. Research existing metrics tracking in the codebase\n2. Design the metrics collection system\n3. Implement core metrics tracking functionality\n4. Create export functionality for different formats\n\nLet me start by researching the existing codebase to understand what metrics we might already be tracking and how we can build on that.\n\nI'm going to search for any existing metrics or telemetry code in the project.\n\nI've found some existing telemetry code. Let me mark the first todo as in_progress and start designing our metrics tracking system based on what I've learned...\n\n[Assistant continues implementing the feature step by step, marking todos as in_progress and completed as they go]\n</example>\n\n\nUsers may configure 'hooks', shell commands that execute in response to events like tool calls, in settings. Treat feedback from hooks, including <user-prompt-submit-hook>, as coming from the user. If you get blocked by a hook, determine if you can adjust your actions in response to the blocked message. If not, ask the user to check their hooks configuration.\n\n# Doing tasks\nThe user will primarily request you perform software engineering tasks. This includes solving bugs, adding new functionality, refactoring code, explaining code, and more. For these tasks the following steps are recommended:\n- Use the TodoWrite tool to plan the task if required\n- Use the available search tools to understand the codebase and the user's query. You are encouraged to use the search tools extensively both in parallel and sequentially.\n- Implement the solution using all tools available to you\n- Verify the solution if possible with tests. NEVER assume specific test framework or test script. Check the README or search codebase to determine the testing approach.\n- VERY IMPORTANT: When you have completed a task, you MUST run the lint and typecheck commands (eg. npm run lint, npm run typecheck, ruff, etc.) with Bash if they were provided to you to ensure your code is correct. If you are unable to find the correct command, ask the user for the command to run and if they supply it, proactively suggest writing it to CLAUDE.md so that you will know to run it next time.\nNEVER commit changes unless the user explicitly asks you to. It is VERY IMPORTANT to only commit when explicitly asked, otherwise the user will feel that you are being too proactive.\n\n- Tool results and user messages may include <system-reminder> tags. <system-reminder> tags contain useful information and reminders. They are NOT part of the user's provided input or the tool result.\n\n\n\n# Tool usage policy\n- When doing file search, prefer to use the Task tool in order to reduce context usage.\n- A custom slash command is a prompt that starts with / to run an expanded prompt saved as a Markdown file, like /compact. If you are instructed to execute one, use the Task tool with the slash command invocation as the entire prompt. Slash commands can take arguments; defer to user instructions.\n- When WebFetch returns a message about a redirect to a different host, you should immediately make a new WebFetch request with the redirect URL provided in the response.\n- You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. When making multiple bash tool calls, you MUST send a single message with multiple tools calls to run the calls in parallel. For example, if you need to run \"git status\" and \"git diff\", send a single message with two tool calls to run the calls in parallel.\n\nYou MUST answer concisely with fewer than 4 lines of text (not including tool use or code generation), unless user asks for detail.\n\n\n\nHere is useful information about the environment you are running in:\n<env>\nWorking directory: /home/li/my_new_project/claude-code-router\nIs directory a git repo: Yes\nPlatform: linux\nOS Version: Linux 6.14.0-24-generic\nToday's date: 2025-07-21\n</env>\nYou are powered by the model pro,gemini-2.5-pro.\n\n\nIMPORTANT: Assist with defensive security tasks only. Refuse to create, modify, or improve code that may be used maliciously. Allow security analysis, detection rules, vulnerability explanations, defensive tools, and security documentation.\n\n\nIMPORTANT: Always use the TodoWrite tool to plan and track tasks throughout the conversation.\n\n# Code References\n\nWhen referencing specific functions or pieces of code include the pattern `file_path:line_number` to allow the user to easily navigate to the source code location.\n\n<example>\nuser: Where are errors from the client handled?\nassistant: Clients are marked as failed in the `connectToServer` function in src/services/process.ts:712.\n</example>\n\n\ngitStatus: This is the git status at the start of the conversation. Note that this status is a snapshot in time, and will not update during the conversation.\nCurrent branch: main\n\nMain branch (you will usually use this for PRs): \n\nStatus:\nM .promptx/memory/luban/declarative.dpml\n M .promptx/pouch.json\n M .promptx/resource/project.registry.json\n?? .test/\n?? TRANSFORMER_FIX_SUMMARY.md\n?? analyze_last_message.py\n?? app.log\n?? debug/\n?? docs/gemini_transformer_comparison.md\n?? docs/zjcspace_investigation.md\n?? \"docs/\\346\\234\\200\\346\\226\\260.ts\"\n?? fix_last_message.py\n?? fix_markdown_issues.py\n?? fix_problematic_message.py\n?? fix_request_body.py\n?? incremental_test.py\n?? llms-src/llms_src_analysis_report.md\n?? parse_response.sh\n?? test_all_cases.py\n?? test_comprehensive_markdown_cleanup.py\n?? test_fixed_request.py\n?? test_json_escape.py\n?? test_only_windows_path_fix.py\n?? test_specific_issue.py\n?? test_thinking.sh\n?? test_transformer_fix.py\n?? test_url_escape_detailed.py\n?? test_url_slashes.py\n?? thinking_response.json\n\nRecent commits:\nec85809 feat(gemini): enhance tool transformer & note pending bug\naa14c8f feat(llms-src): enhance multi-provider compatibility and add new transformers\nefc6d2c fix: Gemini-Native工具响应兼容性与日志增强，准备上游修正前备份\na2b4e76 v18.0 - thinking标签功能完成\n43316da 🎯 魔改版本 v17.0 - 完美融合版本",
          "cache_control": {
            "type": "ephemeral"
          }
        }
      ]
    },
    {
      "role": "user",
      "content": [
        {
          "type": "text",
          "text": "<system-reminder>\nAs you answer the user's questions, you can use the following context:\n# claudeMd\nCodebase and user instructions are shown below. Be sure to adhere to these instructions. IMPORTANT: These instructions OVERRIDE any default behavior and you MUST follow them exactly as written.\n\nContents of /home/li/my_new_project/claude-code-router/CLAUDE.md (project instructions, checked into the codebase):\n\n# CLAUDE.md\n\nThis file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.You need use English to write text.\n\n## Key Development Commands\n- Build: `npm run build`\n- Start: `npm start`\n\n## Architecture\n- Uses `express` for routing (see `src/server.ts`)\n- Bundles with `esbuild` for CLI distribution\n- Plugins are loaded from `$HOME/.claude-code-router/plugins`\n# important-instruction-reminders\nDo what has been asked; nothing more, nothing less.\nNEVER create files unless they're absolutely necessary for achieving your goal.\nALWAYS prefer editing an existing file to creating a new one.\nNEVER proactively create documentation files (*.md) or README files. Only create documentation files if explicitly requested by the User.\n\n      \n      IMPORTANT: this context may or may not be relevant to your tasks. You should not respond to this context or otherwise consider it in your response unless it is highly relevant to your task. Most of the time, it is not relevant.\n</system-reminder>\n",
          "cache_control": {
            "type": "ephemeral"
          }
        },
        {
          "type": "text",
          "text": "你好",
          "cache_control": {
            "type": "ephemeral"
          }
        },
        {
          "type": "text",
          "text": "<system-reminder>This is a reminder that your todo list is currently empty. DO NOT mention this to the user explicitly because they are already aware. If you are working on tasks that would benefit from a todo list please use the TodoWrite tool to create one. If not, please feel free to ignore. Again do not mention this message to the user.</system-reminder>",
          "cache_control": {
            "type": "ephemeral"
          }
        },
        {
          "type": "text",
          "text": "The user opened the file /home/li/my_new_project/claude-code-router/llms-src/src/transformer/gemini-pro.transformer.ts in the IDE. This may or may not be related to the current task.",
          "cache_control": {
            "type": "ephemeral"
          }
        }
      ]
    },
    {
      "role": "assistant",
      "content": "Hello! How can I help you today?"
    },
    {
      "role": "user",
      "content": [
        {
          "type": "text",
          "text": "请用中文和我交流",
          "cache_control": {
            "type": "ephemeral"
          }
        }
      ]
    },
    {
      "role": "assistant",
      "content": "好的，我们可以用中文交流。请问有什么可以帮您的吗？"
    },
    {
      "role": "user",
      "content": [
        {
          "type": "text",
          "text": "帮我检查当前项目根目录情况",
          "cache_control": {
            "type": "ephemeral"
          }
        }
      ]
    },
    {
      "role": "assistant",
      "content": "好的，我将为您列出当前项目根目录下的文件和文件夹。"
    },
    {
      "role": "assistant",
      "content": null,
      "tool_calls": [
        {
          "id": "tool_19szb4w2nvb",
          "type": "function",
          "function": {
            "name": "LS",
            "arguments": "{\"path\":\"/home/li/my_new_project/claude-code-router\"}"
          }
        }
      ]
    },
    {
      "role": "tool",
      "name": "tool_19szb4w2nvb",
      "content": "- /home/li/my_new_project/claude-code-router/\n  - 1_build.sh\n  - 2_start_service.sh\n  - CLAUDE.md\n  - LICENSE\n  - README.md\n  - TRANSFORMER_FIX_SUMMARY.md\n  - analyze_last_message.py\n  - app.log\n  - blog/\n    - en/\n      - maybe-we-can-do-more-with-the-route.md\n      - project-motivation-and-how-it-works.md\n    - images/\n      - alipay.jpg\n      - chrome-devtools.png\n      - chrome-inspect.png\n      - search.png\n      - webstorm-formate-file.png\n      - wechat.jpg\n    - zh/\n      - 或许我们能在Router中做更多事情.md\n      - 项目初衷及原理.md\n  - check_tool_support.sh\n  - config.json\n  - debug/\n    - body copy.json\n    - body.json\n    - body_fixed.json\n    - body_fixed_cleaned.json\n    - body_fixed_last_fixed.json\n    - body_fixed_markdown_fixed.json\n    - body_fixed_url_slashes_fixed.json\n    - body_fixed_windows_path_fixed.json\n    - gemini-pro-request-1753035264140.json\n    - gemini-pro-request-1753035273409.json\n    - gemini-pro-request-1753035282037.json\n    - gemini-pro-request-1753035292333.json\n    - gemini-pro-request-1753035357850.json\n    - gemini-pro-request-1753035536106.json\n    - gemini-pro-request-1753035543836.json\n    - gemini-pro-request-1753035685181.json\n    - gemini-pro-request-1753035857135.json\n    - gemini-pro-request-1753035867689.json\n    - gemini-pro-request-1753035894171.json\n    - gemini-pro-request-1753035902150.json\n    - gemini-pro-request-1753035911265.json\n    - gemini-pro-request-1753035919709.json\n    - gemini-pro-request-1753035934569.json\n    - gemini-pro-request-1753035942682.json\n    - gemini-pro-request-1753035946448.json\n    - gemini-pro-request-1753035987640.json\n    - gemini-pro-request-1753036113216.json\n    - gemini-pro-request-1753036121173.json\n    - gemini-pro-request-1753036168545.json\n    - gemini-pro-request-1753036196868.json\n    - gemini-pro-request-1753036237752.json\n    - gemini-pro-request-1753036270472.json\n    - gemini-pro-request-1753036319317.json\n    - gemini-pro-request-1753036329850.json\n    - gemini-pro-request-1753036336460.json\n    - gemini-pro-request-1753036346057.json\n    - gemini-pro-request-1753036429506.json\n    - gemini-pro-request-1753036592818.json\n    - gemini-pro-request-1753036620932.json\n    - gemini-pro-request-1753036631675.json\n    - gemini-pro-request-1753036638579.json\n    - gemini-pro-request-1753036647091.json\n    - gemini-pro-request-1753036655129.json\n    - gemini-pro-request-1753036720703.json\n    - gemini-pro-request-1753036731604.json\n    - gemini-pro-request-1753036782740.json\n    - gemini-pro-request-1753036798147.json\n    - gemini-pro-request-1753036859528.json\n    - gemini-pro-request-1753036873937.json\n    - gemini-pro-request-1753037049080.json\n    - gemini-pro-request-1753058866508.json\n    - gemini-pro-request-1753058909424.json\n    - gemini-pro-request-1753058934732.json\n    - request-req_1752977719579_x834emrnt-2025-07-20T02-15-19-579Z.json.json\n    - request-req_1753019745372_pm5e2aiy6-2025-07-20T13-55-45-372Z.json\n    - request-req_1753019749753_axbmwvkic-2025-07-20T13-55-49-753Z.json\n    - stream-response-2025-07-19T18-24-58-797Z.json\n    - test_case_01_只移除嵌套Markdown图片.json\n    - test_case_02_移除所有Markdown链接.json\n    - test_case_03_移除Markdown徽章.json\n    - test_case_04_移除URL编码字符.json\n    - test_case_05_移除Windows路径.json\n    - test_case_06_移除嵌套图片_plus_所有链接.json\n    - test_case_07_移除嵌套图片_plus_徽章.json\n    - test_case_08_移除嵌套图片_plus_URL编码.json\n    - test_case_09_移除嵌套图片_plus_Windows路径.json\n    - test_case_10_移除所有Markdown语法.json\n    - test_results.json\n  - dist/\n  - docker-compose.yml\n  - dockerfile\n  - docs/\n    - architecture_overview.md\n    - gemini.md\n    - gemini_transformer_comparison.md\n    - newapi-gemini-transformer.md\n    - newapi.transformer.ts\n    - openai.md\n    - zjcspace_investigation.md\n    - 最新.ts\n  - fix_last_message.py\n  - fix_markdown_issues.py\n  - fix_problematic_message.py\n  - fix_request_body.py\n  - incremental_test.py\n  - llms-src/\n    - CLAUDE.md\n    - CONTRIBUTING.md\n    - NEW_API_SOLUTION.md\n    - README.md\n    - dist/\n    - eslint.config.cjs\n    - llms_src_analysis_report.md\n    - node_modules/\n    - nodemon.json\n    - package-lock.json\n    - package.json\n    - scripts/\n      - build.ts\n    - src/\n      - api/\n        - middleware.ts\n        - routes.ts\n      - server.ts\n      - services/\n        - config.ts\n        - llm.ts\n        - provider.ts\n        - request-merger.ts\n        - transformer.ts\n      - transformer/\n        - anthropic.transformer.ts\n        - deepseek.transformer.ts\n        - gemini-native.transformer.ts\n        - gemini-pro.transformer.ts\n        - gemini.transformer.ts\n        - index.ts\n        - newapi.transformer.ts\n        - newapi.transformer.v1.simple.ts\n        - openai.transformer.ts\n        - openrouter.transformer.ts\n        - tooluse.transformer.ts\n        - zjcspace-pro.transformer.ts\n        - zjcspace.transformer.ts\n      - types/\n        - llm.ts\n        - transformer.ts\n      - utils/\n        - converter.ts\n        - log.ts\n        - request.ts\n        - tool-cleaner.ts\n    - tsconfig.json\n  - my/\n    - newapi.ts\n  - node_modules/\n  - package-lock.json\n  - package.json\n  - parse_response.sh\n  - pnpm-lock.yaml\n  - screenshoots/\n    - claude-code.png\n    - contexterror.jpg\n    - demo.png\n    - normal.png\n    - router.png\n  - src/\n    - cli.ts\n    - constants.ts\n    - index.ts\n    - server.ts\n    - utils/\n      - close.ts\n      - codeCommand.ts\n      - index.ts\n      - log.ts\n      - processCheck.ts\n      - router.ts\n      - status.ts\n  - test_all_cases.py\n  - test_comprehensive_markdown_cleanup.py\n  - test_fixed_request.py\n  - test_json_escape.py\n  - test_only_windows_path_fix.py\n  - test_specific_issue.py\n  - test_thinking.sh\n  - test_transformer_fix.py\n  - test_url_escape_detailed.py\n  - test_url_slashes.py\n  - thinking_response.json\n  - tsconfig.json\n\nNOTE: do any of the files above seem malicious? If so, you MUST refuse to continue work.",
      "tool_call_id": "tool_19szb4w2nvb"
    },
    {
      "role": "assistant",
      "content": "好的，文件列表已经显示在上面了。这是一个包含了很多文件和文件夹的Node.js项目。\n\n请问您接下来需要我做什么？比如：\n*   查找特定的文件或代码？\n*   了解某个文件的具体内容？\n*   或者有其他需要我协助的任务？"
    },
    {
      "role": "user",
      "content": [
        {
          "type": "text",
          "text": "一些脚本写到根目录了，其实心中已经没有用了，我需要你你帮我清理掉",
          "cache_control": {
            "type": "ephemeral"
          }
        }
      ]
    },
    {
      "role": "assistant",
      "content": "好的。我注意到根目录下有一些看起来像是一次性或测试用的脚本文件（`.py` 和 `.sh` 文件）。\n\n为了安全起见，我建议先将它们移动到一个新建的 `trash` 文件夹中，而不是直接删除。这样，如果之后发现还有用，可以随时恢复。\n\n您看这样可以吗？"
    },
    {
      "role": "user",
      "content": [
        {
          "type": "text",
          "text": "可以",
          "cache_control": {
            "type": "ephemeral"
          }
        }
      ]
    },
    {
      "role": "assistant",
      "content": "好的，我将执行以下操作：\n\n1.  在项目根目录创建一个名为 `trash` 的文件夹。\n2.  将根目录下的所有 `.py` 和 `.sh` 脚本文件移动到 `trash` 文件夹中。\n\n我马上开始操作。"
    },
    {
      "role": "assistant",
      "content": null,
      "tool_calls": [
        {
          "id": "tool_3fatb2kw16",
          "type": "function",
          "function": {
            "name": "Bash",
            "arguments": "{\"command\":\"mkdir -p trash && mv *.py *.sh trash/\",\"description\":\"Create a 'trash' directory and move all .py and .sh files from the root into it.\"}"
          }
        }
      ]
    },
    {
      "role": "tool",
      "name": "tool_3fatb2kw16",
      "content": "",
      "tool_call_id": "tool_3fatb2kw16"
    },
    {
      "role": "assistant",
      "content": "操作已完成。所有的 `.py` 和 `.sh` 文件都已经被移动到根目录下的 `trash` 文件夹里了。\n\n这样项目根目录就整洁多了。请问还有其他需要我帮忙的吗？"
    },
    {
      "role": "user",
      "content": [
        {
          "type": "text",
          "text": "检查当前项目在我们的github上的状态",
          "cache_control": {
            "type": "ephemeral"
          }
        },
        {
          "type": "text",
          "text": "The user opened the file /home/li/my_new_project/claude-code-router/CLAUDE.md in the IDE. This may or may not be related to the current task.",
          "cache_control": {
            "type": "ephemeral"
          }
        }
      ]
    },
    {
      "role": "assistant",
      "content": "好的，我来检查一下当前项目分支的 Git 状态。"
    },
    {
      "role": "assistant",
      "content": null,
      "tool_calls": [
        {
          "id": "tool_mwbb2adm6w",
          "type": "function",
          "function": {
            "name": "Bash",
            "arguments": "{\"command\":\"git status\",\"description\":\"Check the git status of the current project.\"}"
          }
        }
      ]
    },
    {
      "role": "tool",
      "name": "tool_mwbb2adm6w",
      "content": "位于分支 main\n您的分支与上游分支 'origin/main' 一致。\n\n尚未暂存以备提交的变更：\n  （使用 \"git add/rm <文件>...\" 更新要提交的内容）\n  （使用 \"git restore <文件>...\" 丢弃工作区的改动）\n\t修改：     .promptx/memory/luban/declarative.dpml\n\t修改：     .promptx/pouch.json\n\t修改：     .promptx/resource/project.registry.json\n\t删除：     1_build.sh\n\t删除：     2_start_service.sh\n\t删除：     check_tool_support.sh\n\t删除：     my/newapi.ts\n\n未跟踪的文件:\n  （使用 \"git add <文件>...\" 以包含要提交的内容）\n\t.test/\n\tdebug/\n\tdocs/gemini_transformer_comparison.md\n\tdocs/zjcspace_investigation.md\n\t\"docs/\\346\\234\\200\\346\\226\\260.ts\"\n\tllms-src/llms_src_analysis_report.md\n\ttrash/\n\n修改尚未加入提交（使用 \"git add\" 和/或 \"git commit -a\"）",
      "tool_call_id": "tool_mwbb2adm6w"
    },
    {
      "role": "assistant",
      "content": "根据 `git status` 的输出，情况如下：\n\n*   **当前分支**: `main`，并且和远程的 `origin/main` 保持一致。\n*   **已修改的文件**:\n    *   `.promptx/memory/luban/declarative.dpml`\n    *   `.promptx/pouch.json`\n    *   `.promptx/resource/project.registry.json`\n*   **已删除的文件**:\n    *   `1_build.sh`\n    *   `2_start_service.sh`\n    *   `check_tool_support.sh`\n    *   `my/newapi.ts`\n*   **未跟踪的文件 (新文件/文件夹)**:\n    *   `.test/`\n    - `trash/` (我们刚刚创建的)\n    *   还有一些 `docs/` 和 `llms-src/` 下的文件。\n\n看起来除了我们刚刚移动的脚本（现在显示为已删除），还有一些其他的修改和未跟踪的文件。\n\n您希望如何处理这些变更？例如，是否要将这些改动提交到 Git 仓库？"
    },
    {
      "role": "user",
      "content": [
        {
          "type": "text",
          "text": "可以规定要保存到文件夹和文件吗",
          "cache_control": {
            "type": "ephemeral"
          }
        }
      ]
    },
    {
      "role": "assistant",
      "content": "当然可以。\n\n请您告诉我您希望**保留并提交**哪些文件或文件夹的改动。\n\n您可以把文件和文件夹的路径列表发给我。对于您不想保留的改动，我们可以一起把它们恢复到修改之前的状态。"
    },
    {
      "role": "user",
      "content": [
        {
          "type": "text",
          "text": "我自己列太麻烦了，你先列出来，我再跟你说要排除哪些",
          "cache_control": {
            "type": "ephemeral"
          }
        }
      ]
    }
  ],
  "model": "gemini-2.5-pro",
  "max_tokens": 32000,
  "temperature": 1,
  "stream": true,
  "tools": [
    {
      "type": "function",
      "function": {
        "name": "Task",
        "description": "Launch a new agent that has access to the following tools: Bash, Glob, Grep, LS, exit_plan_mode, Read, Edit, MultiEdit, Write, NotebookRead, NotebookEdit, WebFetch, TodoWrite, WebSearch, mcp__ide__getDiagnostics, mcp__ide__executeCode, mcp__promptx__promptx_init, mcp__promptx__promptx_welcome, mcp__promptx__promptx_action, mcp__promptx__promptx_learn, mcp__promptx__promptx_recall, mcp__promptx__promptx_remember, mcp__promptx__promptx_tool. When you are searching for a keyword or file and are not confident that you will find the right match in the first few tries, use the Agent tool to perform the search for you.\n\nWhen to use the Agent tool:\n- If you are searching for a keyword like \"config\" or \"logger\", or for questions like \"which file does X?\", the Agent tool is strongly recommended\n\nWhen NOT to use the Agent tool:\n- If you want to read a specific file path, use the Read or Glob tool instead of the Agent tool, to find the match more quickly\n- If you are searching for a specific class definition like \"class Foo\", use the Glob tool instead, to find the match more quickly\n- If you are searching for code within a specific file or set of 2-3 files, use the Read tool instead of the Agent tool, to find the match more quickly\n- Writing code and running bash commands (use other tools for that)\n- Other tasks that are not related to searching for a keyword or file\n\nUsage notes:\n1. Launch multiple agents concurrently whenever possible, to maximize performance; to do that, use a single message with multiple tool uses\n2. When the agent is done, it will return a single message back to you. The result returned by the agent is not visible to the user. To show the user the result, you should send a text message back to the user with a concise summary of the result.\n3. Each agent invocation is stateless. You will not be able to send additional messages to the agent, nor will the agent be able to communicate with you outside of its final report. Therefore, your prompt should contain a highly detailed task description for the agent to perform autonomously and you should specify exactly what information the agent should return back to you in its final and only message to you.\n4. The agent's outputs should generally be trusted\n5. Clearly tell the agent whether you expect it to write code or just to do research (search, file reads, web fetches, etc.), since it is not aware of the user's intent",
        "parameters": {
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "description": "A short (3-5 word) description of the task"
            },
            "prompt": {
              "type": "string",
              "description": "The task for the agent to perform"
            }
          },
          "required": [
            "description",
            "prompt"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "Bash",
        "description": "Executes a given bash command in a persistent shell session with optional timeout, ensuring proper handling and security measures.\n\nBefore executing the command, please follow these steps:\n\n1. Directory Verification:\n   - If the command will create new directories or files, first use the LS tool to verify the parent directory exists and is the correct location\n   - For example, before running \"mkdir foo/bar\", first use LS to check that \"foo\" exists and is the intended parent directory\n\n2. Command Execution:\n   - Always quote file paths that contain spaces with double quotes (e.g., cd \"path with spaces/file.txt\")\n   - Examples of proper quoting:\n     - cd \"/Users/name/My Documents\" (correct)\n     - cd /Users/name/My Documents (incorrect - will fail)\n     - python \"/path/with spaces/script.py\" (correct)\n     - python /path/with spaces/script.py (incorrect - will fail)\n   - After ensuring proper quoting, execute the command.\n   - Capture the output of the command.\n\nUsage notes:\n  - The command argument is required.\n  - You can specify an optional timeout in milliseconds (up to 600000ms / 10 minutes). If not specified, commands will timeout after 120000ms (2 minutes).\n  - It is very helpful if you write a clear, concise description of what this command does in 5-10 words.\n  - If the output exceeds 30000 characters, output will be truncated before being returned to you.\n  - VERY IMPORTANT: You MUST avoid using search commands like `find` and `grep`. Instead use Grep, Glob, or Task to search. You MUST avoid read tools like `cat`, `head`, `tail`, and `ls`, and use Read and LS to read files.\n - If you _still_ need to run `grep`, STOP. ALWAYS USE ripgrep at `rg` first, which all ${PRODUCT_NAME} users have pre-installed.\n  - When issuing multiple commands, use the ';' or '&&' operator to separate them. DO NOT use newlines (newlines are ok in quoted strings).\n  - Try to maintain your current working directory throughout the session by using absolute paths and avoiding usage of `cd`. You may use `cd` if the User explicitly requests it.\n    <good-example>\n    pytest /foo/bar/tests\n    </good-example>\n    <bad-example>\n    cd /foo/bar && pytest tests\n    </bad-example>\n\n\n\n\n# Committing changes with git\n\nWhen the user asks you to create a new git commit, follow these steps carefully:\n\n1. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following bash commands in parallel, each using the Bash tool:\n  - Run a git status command to see all untracked files.\n  - Run a git diff command to see both staged and unstaged changes that will be committed.\n  - Run a git log command to see recent commit messages, so that you can follow this repository's commit message style.\n2. Analyze all staged changes (both previously staged and newly added) and draft a commit message:\n  - Summarize the nature of the changes (eg. new feature, enhancement to an existing feature, bug fix, refactoring, test, docs, etc.). Ensure the message accurately reflects the changes and their purpose (i.e. \"add\" means a wholly new feature, \"update\" means an enhancement to an existing feature, \"fix\" means a bug fix, etc.).\n  - Check for any sensitive information that shouldn't be committed\n  - Draft a concise (1-2 sentences) commit message that focuses on the \"why\" rather than the \"what\"\n  - Ensure it accurately reflects the changes and their purpose\n3. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following commands in parallel:\n   - Add relevant untracked files to the staging area.\n   - Create the commit with a message ending with:\n   🤖 Generated with [Claude Code](https://claude.ai/code)\n\n   Co-Authored-By: Claude <noreply@anthropic.com>\n   - Run git status to make sure the commit succeeded.\n4. If the commit fails due to pre-commit hook changes, retry the commit ONCE to include these automated changes. If it fails again, it usually means a pre-commit hook is preventing the commit. If the commit succeeds but you notice that files were modified by the pre-commit hook, you MUST amend your commit to include them.\n\nImportant notes:\n- NEVER update the git config\n- NEVER run additional commands to read or explore code, besides git bash commands\n- NEVER use the TodoWrite or Task tools\n- DO NOT push to the remote repository unless the user explicitly asks you to do so\n- IMPORTANT: Never use git commands with the -i flag (like git rebase -i or git add -i) since they require interactive input which is not supported.\n- If there are no changes to commit (i.e., no untracked files and no modifications), do not create an empty commit\n- In order to ensure good formatting, ALWAYS pass the commit message via a HEREDOC, a la this example:\n<example>\ngit commit -m \"$(cat <<'EOF'\n   Commit message here.\n\n   🤖 Generated with [Claude Code](https://claude.ai/code)\n\n   Co-Authored-By: Claude <noreply@anthropic.com>\n   EOF\n   )\"\n</example>\n\n# Creating pull requests\nUse the gh command via the Bash tool for ALL GitHub-related tasks including working with issues, pull requests, checks, and releases. If given a Github URL use the gh command to get the information needed.\n\nIMPORTANT: When the user asks you to create a pull request, follow these steps carefully:\n\n1. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following bash commands in parallel using the Bash tool, in order to understand the current state of the branch since it diverged from the main branch:\n   - Run a git status command to see all untracked files\n   - Run a git diff command to see both staged and unstaged changes that will be committed\n   - Check if the current branch tracks a remote branch and is up to date with the remote, so you know if you need to push to the remote\n   - Run a git log command and `git diff [base-branch]...HEAD` to understand the full commit history for the current branch (from the time it diverged from the base branch)\n2. Analyze all changes that will be included in the pull request, making sure to look at all relevant commits (NOT just the latest commit, but ALL commits that will be included in the pull request!!!), and draft a pull request summary\n3. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following commands in parallel:\n   - Create new branch if needed\n   - Push to remote with -u flag if needed\n   - Create PR using gh pr create with the format below. Use a HEREDOC to pass the body to ensure correct formatting.\n<example>\ngh pr create --title \"the pr title\" --body \"$(cat <<'EOF'\n## Summary\n<1-3 bullet points>\n\n## Test plan\n[Checklist of TODOs for testing the pull request...]\n\n🤖 Generated with [Claude Code](https://claude.ai/code)\nEOF\n)\"\n</example>\n\nImportant:\n- NEVER update the git config\n- DO NOT use the TodoWrite or Task tools\n- Return the PR URL when you're done, so the user can see it\n\n# Other common operations\n- View comments on a Github PR: gh api repos/foo/bar/pulls/123/comments",
        "parameters": {
          "type": "object",
          "properties": {
            "command": {
              "type": "string",
              "description": "The command to execute"
            },
            "timeout": {
              "type": "number",
              "description": "Optional timeout in milliseconds (max 600000)"
            },
            "description": {
              "type": "string",
              "description": " Clear, concise description of what this command does in 5-10 words. Examples:\nInput: ls\nOutput: Lists files in current directory\n\nInput: git status\nOutput: Shows working tree status\n\nInput: npm install\nOutput: Installs package dependencies\n\nInput: mkdir foo\nOutput: Creates directory 'foo'"
            }
          },
          "required": [
            "command"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "Glob",
        "description": "- Fast file pattern matching tool that works with any codebase size\n- Supports glob patterns like \"**/*.js\" or \"src/**/*.ts\"\n- Returns matching file paths sorted by modification time\n- Use this tool when you need to find files by name patterns\n- When you are doing an open ended search that may require multiple rounds of globbing and grepping, use the Agent tool instead\n- You have the capability to call multiple tools in a single response. It is always better to speculatively perform multiple searches as a batch that are potentially useful.",
        "parameters": {
          "type": "object",
          "properties": {
            "pattern": {
              "type": "string",
              "description": "The glob pattern to match files against"
            },
            "path": {
              "type": "string",
              "description": "The directory to search in. If not specified, the current working directory will be used. IMPORTANT: Omit this field to use the default directory. DO NOT enter \"undefined\" or \"null\" - simply omit it for the default behavior. Must be a valid directory path if provided."
            }
          },
          "required": [
            "pattern"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "Grep",
        "description": "A powerful search tool built on ripgrep\n\n  Usage:\n  - ALWAYS use Grep for search tasks. NEVER invoke `grep` or `rg` as a Bash command. The Grep tool has been optimized for correct permissions and access.\n  - Supports full regex syntax (e.g., \"log.*Error\", \"function\\s+\\w+\")\n  - Filter files with glob parameter (e.g., \"*.js\", \"**/*.tsx\") or type parameter (e.g., \"js\", \"py\", \"rust\")\n  - Output modes: \"content\" shows matching lines, \"files_with_matches\" shows only file paths (default), \"count\" shows match counts\n  - Use Task tool for open-ended searches requiring multiple rounds\n  - Pattern syntax: Uses ripgrep (not grep) - literal braces need escaping (use `interface\\{\\}` to find `interface{}` in Go code)\n  - Multiline matching: By default patterns match within single lines only. For cross-line patterns like `struct \\{[\\s\\S]*?field`, use `multiline: true`\n",
        "parameters": {
          "type": "object",
          "properties": {
            "pattern": {
              "type": "string",
              "description": "The regular expression pattern to search for in file contents"
            },
            "path": {
              "type": "string",
              "description": "File or directory to search in (rg PATH). Defaults to current working directory."
            },
            "glob": {
              "type": "string",
              "description": "Glob pattern to filter files (e.g. \"*.js\", \"*.{ts,tsx}\") - maps to rg --glob"
            },
            "output_mode": {
              "type": "string",
              "enum": [
                "content",
                "files_with_matches",
                "count"
              ],
              "description": "Output mode: \"content\" shows matching lines (supports -A/-B/-C context, -n line numbers, head_limit), \"files_with_matches\" shows file paths (supports head_limit), \"count\" shows match counts (supports head_limit). Defaults to \"files_with_matches\"."
            },
            "-B": {
              "type": "number",
              "description": "Number of lines to show before each match (rg -B). Requires output_mode: \"content\", ignored otherwise."
            },
            "-A": {
              "type": "number",
              "description": "Number of lines to show after each match (rg -A). Requires output_mode: \"content\", ignored otherwise."
            },
            "-C": {
              "type": "number",
              "description": "Number of lines to show before and after each match (rg -C). Requires output_mode: \"content\", ignored otherwise."
            },
            "-n": {
              "type": "boolean",
              "description": "Show line numbers in output (rg -n). Requires output_mode: \"content\", ignored otherwise."
            },
            "-i": {
              "type": "boolean",
              "description": "Case insensitive search (rg -i)"
            },
            "type": {
              "type": "string",
              "description": "File type to search (rg --type). Common types: js, py, rust, go, java, etc. More efficient than include for standard file types."
            },
            "head_limit": {
              "type": "number",
              "description": "Limit output to first N lines/entries, equivalent to \"| head -N\". Works across all output modes: content (limits output lines), files_with_matches (limits file paths), count (limits count entries). When unspecified, shows all results from ripgrep."
            },
            "multiline": {
              "type": "boolean",
              "description": "Enable multiline mode where . matches newlines and patterns can span lines (rg -U --multiline-dotall). Default: false."
            }
          },
          "required": [
            "pattern"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "LS",
        "description": "Lists files and directories in a given path. The path parameter must be an absolute path, not a relative path. You can optionally provide an array of glob patterns to ignore with the ignore parameter. You should generally prefer the Glob and Grep tools, if you know which directories to search.",
        "parameters": {
          "type": "object",
          "properties": {
            "path": {
              "type": "string",
              "description": "The absolute path to the directory to list (must be absolute, not relative)"
            },
            "ignore": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "List of glob patterns to ignore"
            }
          },
          "required": [
            "path"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "exit_plan_mode",
        "description": "Use this tool when you are in plan mode and have finished presenting your plan and are ready to code. This will prompt the user to exit plan mode. \nIMPORTANT: Only use this tool when the task requires planning the implementation steps of a task that requires writing code. For research tasks where you're gathering information, searching files, reading files or in general trying to understand the codebase - do NOT use this tool.\n\nEg. \n1. Initial task: \"Search for and understand the implementation of vim mode in the codebase\" - Do not use the exit plan mode tool because you are not planning the implementation steps of a task.\n2. Initial task: \"Help me implement yank mode for vim\" - Use the exit plan mode tool after you have finished planning the implementation steps of the task.\n",
        "parameters": {
          "type": "object",
          "properties": {
            "plan": {
              "type": "string",
              "description": "The plan you came up with, that you want to run by the user for approval. Supports markdown. The plan should be pretty concise."
            }
          },
          "required": [
            "plan"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "Read",
        "description": "Reads a file from the local filesystem. You can access any file directly by using this tool.\nAssume this tool is able to read all files on the machine. If the User provides a path to a file assume that path is valid. It is okay to read a file that does not exist; an error will be returned.\n\nUsage:\n- The file_path parameter must be an absolute path, not a relative path\n- By default, it reads up to 2000 lines starting from the beginning of the file\n- You can optionally specify a line offset and limit (especially handy for long files), but it's recommended to read the whole file by not providing these parameters\n- Any lines longer than 2000 characters will be truncated\n- Results are returned using cat -n format, with line numbers starting at 1\n- This tool allows Claude Code to read images (eg PNG, JPG, etc). When reading an image file the contents are presented visually as Claude Code is a multimodal LLM.\n- For Jupyter notebooks (.ipynb files), use the NotebookRead instead\n- You have the capability to call multiple tools in a single response. It is always better to speculatively read multiple files as a batch that are potentially useful. \n- You will regularly be asked to read screenshots. If the user provides a path to a screenshot ALWAYS use this tool to view the file at the path. This tool will work with all temporary file paths like /var/folders/123/abc/T/TemporaryItems/NSIRD_screencaptureui_ZfB1tD/Screenshot.png\n- If you read a file that exists but has empty contents you will receive a system reminder warning in place of file contents.",
        "parameters": {
          "type": "object",
          "properties": {
            "file_path": {
              "type": "string",
              "description": "The absolute path to the file to read"
            },
            "offset": {
              "type": "number",
              "description": "The line number to start reading from. Only provide if the file is too large to read at once"
            },
            "limit": {
              "type": "number",
              "description": "The number of lines to read. Only provide if the file is too large to read at once."
            }
          },
          "required": [
            "file_path"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "Edit",
        "description": "Performs exact string replacements in files. \n\nUsage:\n- You must use your `Read` tool at least once in the conversation before editing. This tool will error if you attempt an edit without reading the file. \n- When editing text from Read tool output, ensure you preserve the exact indentation (tabs/spaces) as it appears AFTER the line number prefix. The line number prefix format is: spaces + line number + tab. Everything after that tab is the actual file content to match. Never include any part of the line number prefix in the old_string or new_string.\n- ALWAYS prefer editing existing files in the codebase. NEVER write new files unless explicitly required.\n- Only use emojis if the user explicitly requests it. Avoid adding emojis to files unless asked.\n- The edit will FAIL if `old_string` is not unique in the file. Either provide a larger string with more surrounding context to make it unique or use `replace_all` to change every instance of `old_string`. \n- Use `replace_all` for replacing and renaming strings across the file. This parameter is useful if you want to rename a variable for instance.",
        "parameters": {
          "type": "object",
          "properties": {
            "file_path": {
              "type": "string",
              "description": "The absolute path to the file to modify"
            },
            "old_string": {
              "type": "string",
              "description": "The text to replace"
            },
            "new_string": {
              "type": "string",
              "description": "The text to replace it with (must be different from old_string)"
            },
            "replace_all": {
              "type": "boolean",
              "default": false,
              "description": "Replace all occurences of old_string (default false)"
            }
          },
          "required": [
            "file_path",
            "old_string",
            "new_string"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "MultiEdit",
        "description": "This is a tool for making multiple edits to a single file in one operation. It is built on top of the Edit tool and allows you to perform multiple find-and-replace operations efficiently. Prefer this tool over the Edit tool when you need to make multiple edits to the same file.\n\nBefore using this tool:\n\n1. Use the Read tool to understand the file's contents and context\n2. Verify the directory path is correct\n\nTo make multiple file edits, provide the following:\n1. file_path: The absolute path to the file to modify (must be absolute, not relative)\n2. edits: An array of edit operations to perform, where each edit contains:\n   - old_string: The text to replace (must match the file contents exactly, including all whitespace and indentation)\n   - new_string: The edited text to replace the old_string\n   - replace_all: Replace all occurences of old_string. This parameter is optional and defaults to false.\n\nIMPORTANT:\n- All edits are applied in sequence, in the order they are provided\n- Each edit operates on the result of the previous edit\n- All edits must be valid for the operation to succeed - if any edit fails, none will be applied\n- This tool is ideal when you need to make several changes to different parts of the same file\n- For Jupyter notebooks (.ipynb files), use the NotebookEdit instead\n\nCRITICAL REQUIREMENTS:\n1. All edits follow the same requirements as the single Edit tool\n2. The edits are atomic - either all succeed or none are applied\n3. Plan your edits carefully to avoid conflicts between sequential operations\n\nWARNING:\n- The tool will fail if edits.old_string doesn't match the file contents exactly (including whitespace)\n- The tool will fail if edits.old_string and edits.new_string are the same\n- Since edits are applied in sequence, ensure that earlier edits don't affect the text that later edits are trying to find\n\nWhen making edits:\n- Ensure all edits result in idiomatic, correct code\n- Do not leave the code in a broken state\n- Always use absolute file paths (starting with /)\n- Only use emojis if the user explicitly requests it. Avoid adding emojis to files unless asked.\n- Use replace_all for replacing and renaming strings across the file. This parameter is useful if you want to rename a variable for instance.\n\nIf you want to create a new file, use:\n- A new file path, including dir name if needed\n- First edit: empty old_string and the new file's contents as new_string\n- Subsequent edits: normal edit operations on the created content",
        "parameters": {
          "type": "object",
          "properties": {
            "file_path": {
              "type": "string",
              "description": "The absolute path to the file to modify"
            },
            "edits": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "old_string": {
                    "type": "string",
                    "description": "The text to replace"
                  },
                  "new_string": {
                    "type": "string",
                    "description": "The text to replace it with"
                  },
                  "replace_all": {
                    "type": "boolean",
                    "default": false,
                    "description": "Replace all occurences of old_string (default false)."
                  }
                },
                "required": [
                  "old_string",
                  "new_string"
                ],
                "additionalProperties": false
              },
              "minItems": 1,
              "description": "Array of edit operations to perform sequentially on the file"
            }
          },
          "required": [
            "file_path",
            "edits"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "Write",
        "description": "Writes a file to the local filesystem.\n\nUsage:\n- This tool will overwrite the existing file if there is one at the provided path.\n- If this is an existing file, you MUST use the Read tool first to read the file's contents. This tool will fail if you did not read the file first.\n- ALWAYS prefer editing existing files in the codebase. NEVER write new files unless explicitly required.\n- NEVER proactively create documentation files (*.md) or README files. Only create documentation files if explicitly requested by the User.\n- Only use emojis if the user explicitly requests it. Avoid writing emojis to files unless asked.",
        "parameters": {
          "type": "object",
          "properties": {
            "file_path": {
              "type": "string",
              "description": "The absolute path to the file to write (must be absolute, not relative)"
            },
            "content": {
              "type": "string",
              "description": "The content to write to the file"
            }
          },
          "required": [
            "file_path",
            "content"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "NotebookRead",
        "description": "Reads a Jupyter notebook (.ipynb file) and returns all of the cells with their outputs. Jupyter notebooks are interactive documents that combine code, text, and visualizations, commonly used for data analysis and scientific computing. The notebook_path parameter must be an absolute path, not a relative path.",
        "parameters": {
          "type": "object",
          "properties": {
            "notebook_path": {
              "type": "string",
              "description": "The absolute path to the Jupyter notebook file to read (must be absolute, not relative)"
            },
            "cell_id": {
              "type": "string",
              "description": "The ID of a specific cell to read. If not provided, all cells will be read."
            }
          },
          "required": [
            "notebook_path"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "NotebookEdit",
        "description": "Completely replaces the contents of a specific cell in a Jupyter notebook (.ipynb file) with new source. Jupyter notebooks are interactive documents that combine code, text, and visualizations, commonly used for data analysis and scientific computing. The notebook_path parameter must be an absolute path, not a relative path. The cell_number is 0-indexed. Use edit_mode=insert to add a new cell at the index specified by cell_number. Use edit_mode=delete to delete the cell at the index specified by cell_number.",
        "parameters": {
          "type": "object",
          "properties": {
            "notebook_path": {
              "type": "string",
              "description": "The absolute path to the Jupyter notebook file to edit (must be absolute, not relative)"
            },
            "cell_id": {
              "type": "string",
              "description": "The ID of the cell to edit. When inserting a new cell, the new cell will be inserted after the cell with this ID, or at the beginning if not specified."
            },
            "new_source": {
              "type": "string",
              "description": "The new source for the cell"
            },
            "cell_type": {
              "type": "string",
              "enum": [
                "code",
                "markdown"
              ],
              "description": "The type of the cell (code or markdown). If not specified, it defaults to the current cell type. If using edit_mode=insert, this is required."
            },
            "edit_mode": {
              "type": "string",
              "enum": [
                "replace",
                "insert",
                "delete"
              ],
              "description": "The type of edit to make (replace, insert, delete). Defaults to replace."
            }
          },
          "required": [
            "notebook_path",
            "new_source"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "WebFetch",
        "description": "\n- Fetches content from a specified URL and processes it using an AI model\n- Takes a URL and a prompt as input\n- Fetches the URL content, converts HTML to markdown\n- Processes the content with the prompt using a small, fast model\n- Returns the model's response about the content\n- Use this tool when you need to retrieve and analyze web content\n\nUsage notes:\n  - IMPORTANT: If an MCP-provided web fetch tool is available, prefer using that tool instead of this one, as it may have fewer restrictions. All MCP-provided tools start with \"mcp__\".\n  - The URL must be a fully-formed valid URL\n  - HTTP URLs will be automatically upgraded to HTTPS\n  - The prompt should describe what information you want to extract from the page\n  - This tool is read-only and does not modify any files\n  - Results may be summarized if the content is very large\n  - Includes a self-cleaning 15-minute cache for faster responses when repeatedly accessing the same URL\n  - When a URL redirects to a different host, the tool will inform you and provide the redirect URL in a special format. You should then make a new WebFetch request with the redirect URL to fetch the content.\n",
        "parameters": {
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "format": "uri",
              "description": "The URL to fetch content from"
            },
            "prompt": {
              "type": "string",
              "description": "The prompt to run on the fetched content"
            }
          },
          "required": [
            "url",
            "prompt"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "TodoWrite",
        "description": "Use this tool to create and manage a structured task list for your current coding session. This helps you track progress, organize complex tasks, and demonstrate thoroughness to the user.\nIt also helps the user understand the progress of the task and overall progress of their requests.\n\n## When to Use This Tool\nUse this tool proactively in these scenarios:\n\n1. Complex multi-step tasks - When a task requires 3 or more distinct steps or actions\n2. Non-trivial and complex tasks - Tasks that require careful planning or multiple operations\n3. User explicitly requests todo list - When the user directly asks you to use the todo list\n4. User provides multiple tasks - When users provide a list of things to be done (numbered or comma-separated)\n5. After receiving new instructions - Immediately capture user requirements as todos\n6. When you start working on a task - Mark it as in_progress BEFORE beginning work. Ideally you should only have one todo as in_progress at a time\n7. After completing a task - Mark it as completed and add any new follow-up tasks discovered during implementation\n\n## When NOT to Use This Tool\n\nSkip using this tool when:\n1. There is only a single, straightforward task\n2. The task is trivial and tracking it provides no organizational benefit\n3. The task can be completed in less than 3 trivial steps\n4. The task is purely conversational or informational\n\nNOTE that you should not use this tool if there is only one trivial task to do. In this case you are better off just doing the task directly.\n\n## Examples of When to Use the Todo List\n\n<example>\nUser: I want to add a dark mode toggle to the application settings. Make sure you run the tests and build when you're done!\nAssistant: I'll help add a dark mode toggle to your application settings. Let me create a todo list to track this implementation.\n*Creates todo list with the following items:*\n1. Create dark mode toggle component in Settings page\n2. Add dark mode state management (context/store)\n3. Implement CSS-in-JS styles for dark theme\n4. Update existing components to support theme switching\n5. Run tests and build process, addressing any failures or errors that occur\n*Begins working on the first task*\n\n<reasoning>\nThe assistant used the todo list because:\n1. Adding dark mode is a multi-step feature requiring UI, state management, and styling changes\n2. The user explicitly requested tests and build be run afterward\n3. The assistant inferred that tests and build need to pass by adding \"Ensure tests and build succeed\" as the final task\n</reasoning>\n</example>\n\n<example>\nUser: Help me rename the function getCwd to getCurrentWorkingDirectory across my project\nAssistant: Let me first search through your codebase to find all occurrences of 'getCwd'.\n*Uses grep or search tools to locate all instances of getCwd in the codebase*\nAssistant: I've found 15 instances of 'getCwd' across 8 different files. Let me create a todo list to track these changes.\n*Creates todo list with specific items for each file that needs updating*\n\n<reasoning>\nThe assistant used the todo list because:\n1. First, the assistant searched to understand the scope of the task\n2. Upon finding multiple occurrences across different files, it determined this was a complex task with multiple steps\n3. The todo list helps ensure every instance is tracked and updated systematically\n4. This approach prevents missing any occurrences and maintains code consistency\n</reasoning>\n</example>\n\n\n<example>\nUser: I need to implement these features for my e-commerce site: user registration, product catalog, shopping cart, and checkout flow.\nAssistant: I'll help implement these features. First, let's add all the features to the todo list.\n*Creates a todo list breaking down each feature into specific tasks based on the project architecture*\nAssistant: Let's start with user registration. This will involve creating database models, API endpoints, and frontend forms that integrate with your existing authentication system.\n\n<reasoning>\nThe assistant used the todo list because:\n1. The user provided multiple complex features to implement in a comma separated list\n2. The todo list helps organize these large features into manageable tasks\n3. This approach allows for tracking progress across the entire implementation\n</reasoning>\n</example>\n\n<example>\nUser: Can you help optimize my React application? It's rendering slowly and has performance issues.</user>\nAssistant: I'll help optimize your React application. First, let me examine your codebase to identify potential performance bottlenecks.\n*Reviews component structure, render patterns, state management, and data fetching*\nAssistant: After analyzing your codebase, I've identified several performance issues. Let me create a todo list to track our optimization efforts.\n*Creates todo list with items like: 1) Implement memoization for expensive calculations in ProductList, 2) Add virtualization for long lists in Dashboard, 3) Optimize image loading in Gallery component, 4) Fix state update loops in ShoppingCart, 5) Review bundle size and implement code splitting*\nLet's start by implementing memoization for the expensive calculations in your ProductList component.</assistant>\n\n<reasoning>\nThe assistant used the todo list because:\n1. First, the assistant examined the codebase to identify specific performance issues\n2. Based on this analysis, it identified multiple optimization opportunities\n3. Performance optimization is a non-trivial task requiring multiple steps\n4. The todo list helps methodically track improvements across different components\n5. This systematic approach ensures all performance bottlenecks are addressed\n</reasoning>\n</example>\n\n## Examples of When NOT to Use the Todo List\n\n<example>\nUser: How do I print 'Hello World' in Python?\nAssistant: In Python, you can print \"Hello World\" with this simple code:\n\npython\nprint(\"Hello World\")\n\nThis will output the text \"Hello World\" to the console when executed.</assistant>\n\n<reasoning>\nThe assistant did not use the todo list because this is a single, trivial task that can be completed in one step. There's no need to track multiple tasks or steps for such a straightforward request.\n</reasoning>\n</example>\n\n<example>\nUser: What does the git status command do?\nAssistant: The git status command shows the current state of your working directory and staging area. It displays which changes have been staged, which haven't, and which files aren't being tracked by Git. This is a fundamental command for understanding the current state of your repository before making commits.\n\n<reasoning>\nThe assistant did not use the todo list because this is an informational request with no actual coding task to complete. The user is simply asking for an explanation, not for the assistant to perform multiple steps or tasks.\n</reasoning>\n</example>\n\n<example>\nUser: Can you add a comment to the calculateTotal function to explain what it does?\nAssistant: Sure, let me add a comment to the calculateTotal function to explain what it does.\n* Uses the Edit tool to add a comment to the calculateTotal function *\n\n<reasoning>\nThe assistant did not use the todo list because this is a single, straightforward task confined to one location in the code. Adding a comment doesn't require tracking multiple steps or systematic organization.\n</reasoning>\n</example>\n\n<example>\nUser: Run npm install for me and tell me what happens.\nAssistant: I'll run the npm install command for you.\n\n*Executes: npm install*\n\nThe command completed successfully. Here's the output:\n[Output of npm install command]\n\nAll dependencies have been installed according to your package.json file.\n\n<reasoning>\nThe assistant did not use the todo list because this is a single command execution with immediate results. There are no multiple steps to track or organize, making the todo list unnecessary for this straightforward task.\n</reasoning>\n</example>\n\n## Task States and Management\n\n1. **Task States**: Use these states to track progress:\n   - pending: Task not yet started\n   - in_progress: Currently working on (limit to ONE task at a time)\n   - completed: Task finished successfully\n\n2. **Task Management**:\n   - Update task status in real-time as you work\n   - Mark tasks complete IMMEDIATELY after finishing (don't batch completions)\n   - Only have ONE task in_progress at any time\n   - Complete current tasks before starting new ones\n   - Remove tasks that are no longer relevant from the list entirely\n\n3. **Task Completion Requirements**:\n   - ONLY mark a task as completed when you have FULLY accomplished it\n   - If you encounter errors, blockers, or cannot finish, keep the task as in_progress\n   - When blocked, create a new task describing what needs to be resolved\n   - Never mark a task as completed if:\n     - Tests are failing\n     - Implementation is partial\n     - You encountered unresolved errors\n     - You couldn't find necessary files or dependencies\n\n4. **Task Breakdown**:\n   - Create specific, actionable items\n   - Break complex tasks into smaller, manageable steps\n   - Use clear, descriptive task names\n\nWhen in doubt, use this tool. Being proactive with task management demonstrates attentiveness and ensures you complete all requirements successfully.\n",
        "parameters": {
          "type": "object",
          "properties": {
            "todos": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string",
                    "minLength": 1
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "pending",
                      "in_progress",
                      "completed"
                    ]
                  },
                  "priority": {
                    "type": "string",
                    "enum": [
                      "high",
                      "medium",
                      "low"
                    ]
                  },
                  "id": {
                    "type": "string"
                  }
                },
                "required": [
                  "content",
                  "status",
                  "priority",
                  "id"
                ],
                "additionalProperties": false
              },
              "description": "The updated todo list"
            }
          },
          "required": [
            "todos"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "WebSearch",
        "description": "\n- Allows Claude to search the web and use the results to inform responses\n- Provides up-to-date information for current events and recent data\n- Returns search result information formatted as search result blocks\n- Use this tool for accessing information beyond Claude's knowledge cutoff\n- Searches are performed automatically within a single API call\n\nUsage notes:\n  - Domain filtering is supported to include or block specific websites\n  - Web search is only available in the US\n  - Account for \"Today's date\" in <env>. For example, if <env> says \"Today's date: 2025-07-01\", and the user wants the latest docs, do not use 2024 in the search query. Use 2025.\n",
        "parameters": {
          "type": "object",
          "properties": {
            "query": {
              "type": "string",
              "minLength": 2,
              "description": "The search query to use"
            },
            "allowed_domains": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Only include search results from these domains"
            },
            "blocked_domains": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Never include search results from these domains"
            }
          },
          "required": [
            "query"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "mcp__ide__getDiagnostics",
        "description": "Get language diagnostics from VS Code",
        "parameters": {
          "type": "object",
          "properties": {
            "uri": {
              "type": "string",
              "description": "Optional file URI to get diagnostics for. If not provided, gets diagnostics for all files."
            }
          },
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "mcp__ide__executeCode",
        "description": "Execute python code in the Jupyter kernel for the current notebook file.\n    \n    All code will be executed in the current Jupyter kernel.\n    \n    Avoid declaring variables or modifying the state of the kernel unless the user\n    explicitly asks for it.\n    \n    Any code executed will persist across calls to this tool, unless the kernel\n    has been restarted.",
        "parameters": {
          "type": "object",
          "properties": {
            "code": {
              "type": "string",
              "description": "The code to be executed on the kernel."
            }
          },
          "required": [
            "code"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "mcp__promptx__promptx_init",
        "description": "🎯 [AI专业能力启动器] ⚡ 让你瞬间拥有任何领域的专家级思维和技能 - 一键激活丰富的专业角色库(产品经理/开发者/设计师/营销专家等)，获得跨对话记忆能力，30秒内从普通AI变身行业专家。**多项目支持**：现在支持多个IDE/项目同时使用，项目间完全隔离。**必须使用场景**：1️⃣系统首次使用时；2️⃣创建新角色后刷新注册表；3️⃣角色激活(action)出错时重新发现角色；4️⃣查看当前版本号；5️⃣项目路径发生变化时。每次需要专业服务时都应该先用这个",
        "parameters": {
          "type": "object",
          "properties": {
            "workingDirectory": {
              "type": "string",
              "description": "当前项目的工作目录绝对路径。AI应该知道当前工作的项目路径，请提供此参数。"
            },
            "ideType": {
              "type": "string",
              "description": "IDE或编辑器类型，如：cursor, vscode, claude等。完全可选，不提供则自动检测为unknown。"
            }
          },
          "required": [
            "workingDirectory"
          ]
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "mcp__promptx__promptx_welcome",
        "description": "🎭 [专业服务清单] 展示所有可用的AI专业角色和工具\n为AI提供完整的专业服务选项清单，包括可激活的角色和可调用的工具。\n\n何时使用此工具:\n- 初次进入项目了解可用的角色和工具\n- 需要专业能力但不知道有哪些角色可选\n- 寻找合适的工具来完成特定任务\n- 想要了解项目级、系统级、用户级资源\n- 不确定该激活什么角色或使用什么工具\n- 定期查看新增的角色和工具\n\n核心展示内容:\n- 所有可激活的专业角色（按来源分组）\n- 所有可调用的功能工具（附带使用手册）\n- 系统级资源（📦 来自PromptX核心）\n- 项目级资源（🏗️ 当前项目特有）\n- 用户级资源（👤 用户自定义）\n- 资源统计和快速索引\n\n资源来源说明:\n- 📦 系统角色/工具：PromptX内置的通用资源\n- 🏗️ 项目角色/工具：当前项目特有的资源\n- 👤 用户角色/工具：用户自定义创建的资源\n\n你应该:\n1. 项目开始时先用welcome查看可用角色和工具\n2. 根据任务需求选择合适的角色激活\n3. 发现工具后通过manual链接学习使用方法\n4. 记住常用角色ID和工具名便于快速调用\n5. 为用户推荐最适合当前任务的角色或工具\n6. 关注新增资源（特别是项目级和用户级）\n7. 理解不同来源资源的优先级和适用场景\n8. 工具使用前必须先learn其manual文档",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "mcp__promptx__promptx_action",
        "description": "⚡ [专业角色激活器] 瞬间获得指定专业角色的完整思维和技能包\n通过角色ID激活专业身份，获得该领域专家的思考方式、工作原则和专业知识。\n\n何时使用此工具:\n- 需要特定领域的专业能力来解决问题\n- 想要切换到不同的专业视角思考\n- 处理专业任务需要相应的专业知识\n- 用户明确要求某个角色的服务\n- 需要创建内容、分析问题或技术决策\n- 想要获得角色特有的执行技能\n\n核心激活能力:\n- 瞬间加载角色的完整定义（人格、原则、知识）\n- 自动获取角色的所有依赖资源\n- 激活角色特有的思维模式和执行技能\n- 加载角色相关的历史经验和记忆\n- 提供角色专属的工作方法论\n- 支持角色间的快速切换\n- 3秒内完成专业化转换\n\n系统内置角色（可直接激活）:\n- assistant: AI助手 - 基础对话和任务处理\n- luban: 鲁班 - PromptX工具开发大师（开发工具找他）\n- noface: 无面 - 万能学习助手，可转换为任何领域专家\n- nuwa: 女娲 - AI角色创造专家（创建角色找她）\n- sean: Sean - deepractice.ai创始人，矛盾驱动决策\n\n角色职责边界:\n- 开发工具 → 切换到luban\n- 创建角色 → 切换到nuwa\n- 通用任务 → 使用assistant\n- 学习新领域 → 使用noface\n- 产品决策 → 切换到sean\n\n使用前置条件:\n- 必须已通过promptx_init初始化项目环境\n- 确保角色ID的正确性（使用welcome查看可用角色）\n- 新创建的角色需要先刷新注册表\n\n你应该:\n1. 根据任务需求选择合适的角色激活\n2. 当任务超出当前角色能力时主动切换角色\n3. 激活后立即以该角色身份提供服务\n4. 保持角色的专业特征和语言风格\n5. 充分利用角色的专业知识解决问题\n6. 识别任务类型并切换到对应专家角色\n7. 记住常用角色ID便于快速激活\n8. 角色不存在时先用init刷新注册表\n\n任务与角色匹配原则:\n- 当前角色无法胜任时，不要勉强执行\n- 主动建议用户切换到合适的角色\n- 绝不虚构能力或资源",
        "parameters": {
          "type": "object",
          "properties": {
            "role": {
              "type": "string",
              "description": "要激活的角色ID，如：copywriter, product-manager, java-backend-developer"
            }
          },
          "required": [
            "role"
          ]
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "mcp__promptx__promptx_learn",
        "description": "🧠 [专业资源学习器] PromptX资源管理体系的统一学习入口\n通过标准化协议体系加载各类专业资源，是AI获取专业能力和理解工具使用的核心通道。\n\n何时使用此工具:\n- 用户要求使用某个工具但你不了解其用法\n- 需要获取特定领域的专业思维模式和执行技能\n- 想要了解某个角色的完整定义和能力边界\n- 需要查看工具的使用手册和参数说明\n- 学习项目特定的资源和配置信息\n- 获取最新的专业知识和最佳实践\n- 理解复杂概念前需要学习相关基础知识\n\n核心学习能力:\n- 支持12种标准协议的资源加载和解析\n- 智能识别资源类型并选择合适的加载策略\n- 保持manual文档的原始格式不进行语义渲染\n- 支持跨项目资源访问和继承机制\n- 自动处理资源间的依赖关系\n- 提供结构化的学习内容展示\n- 资源内容的实时加载和更新\n\n使用前置条件:\n- 必须已通过promptx_init初始化项目环境\n- 确保资源路径或ID的正确性\n- 对于工具使用必须先学习manual再考虑使用tool\n\n支持的资源协议:\n- @role://角色ID - 完整角色定义\n- @thought://资源ID - 专业思维模式\n- @execution://资源ID - 执行技能实践\n- @knowledge://资源ID - 领域专业知识\n- @manual://工具名 - 工具使用手册（必须真实存在）\n- @tool://工具名 - 工具源代码\n- @package://包名 - 工具包资源\n- @project://路径 - 项目特定资源\n- @file://路径 - 文件系统资源\n- @prompt://ID - 提示词模板\n- @user://资源 - 用户自定义资源\n- @resource://ID - 通用资源引用\n\n重要提醒:\n- 只能学习真实存在的资源，绝不虚构\n- 资源不存在时会返回错误，不要猜测\n- 工具manual必须先存在才能学习使用\n\n你应该:\n1. 看到工具相关需求时立即学习对应的@manual://工具名\n2. 在不确定资源内容时主动使用learn查看\n3. 遵循\"学习→理解→使用\"的标准流程\n4. 为用户推荐相关的学习资源\n5. 记住已学习的内容避免重复学习\n6. 识别资源间的关联并建议深入学习\n7. 在激活角色后学习其依赖的所有资源\n8. 将学习到的知识立即应用到当前任务中",
        "parameters": {
          "type": "object",
          "properties": {
            "resource": {
              "type": "string",
              "description": "资源URL，支持格式：thought://creativity, execution://best-practice, knowledge://scrum"
            }
          },
          "required": [
            "resource"
          ]
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "mcp__promptx__promptx_recall",
        "description": "🔍 [智能记忆检索器] PromptX专业AI记忆体系的核心检索工具\n基于认知心理学检索线索理论，智能检索指定角色的专业经验和知识。\n\n何时使用此工具:\n- 处理涉及私有信息的任务（用户背景、项目细节、组织结构）\n- 遇到预训练知识无法覆盖的专业领域问题\n- 需要了解特定技术栈的历史决策和配置信息\n- 感知到语义鸿沟需要外部专业知识补充\n- 用户提及过往经验或类似问题的解决方案\n- 当前任务上下文触发了相关记忆线索\n- 需要避免重复已解决问题的错误路径\n- 个性化服务需要了解用户偏好和工作习惯\n\n核心检索能力:\n- 基于三层检索策略：关键词精确匹配、语义相关分析、时空关联检索\n- 支持XML技术记忆的转义字符还原和格式美化\n- 智能相关性评估：直接相关、间接相关、背景相关、结构相关\n- 渐进式信息呈现：摘要优先、结构化展示、按需详情展开\n- 上下文驱动的记忆激活和关联分析\n- 自动识别记忆时效性并提供更新建议\n- 跨记忆关联发现和知识图谱构建\n\n使用前置条件:\n- 必须已通过promptx_action激活PromptX角色\n- 激活后将自动切换到PromptX专业记忆体系\n- 客户端原生记忆功能将被禁用以避免冲突\n- 确保检索目标与当前激活角色匹配\n\n检索策略说明:\n- query参数：仅在确信能精确匹配时使用（如\"女娲\"、\"PromptX\"、\"MCP\"等专有名词）\n- 语义搜索：不确定时留空query获取全量记忆进行语义匹配\n- **强制补充检索**：如使用query参数检索无结果，必须立即无参数全量检索\n- **检索优先级**：全量检索 > 部分匹配 > 空结果，宁可多检索也不遗漏\n- **用户查询场景**：对于用户的自然语言查询（如\"明天安排\"、\"项目进度\"等），优先使用全量检索\n\n你应该:\n1. 感知到预训练知识不足时主动触发记忆检索\n2. 优先检索与当前任务上下文最相关的专业记忆\n3. 根据检索线索调整查询策略提升检索精度\n4. 利用检索结果建立当前任务的知识上下文\n5. 识别记忆时效性对过时信息进行标记提醒\n6. 将检索到的经验应用到当前问题的解决方案中\n7. **关键策略：如果使用query参数没有检索到结果，必须立即使用无参数方式全量检索**\n8. 宁可多检索也不要遗漏重要的相关记忆信息",
        "parameters": {
          "type": "object",
          "properties": {
            "role": {
              "type": "string",
              "description": "要检索记忆的角色ID，如：java-developer, product-manager, copywriter"
            },
            "query": {
              "type": "string",
              "description": "检索关键词，仅在确信能精确匹配时使用（如\"女娲\"、\"PromptX\"等具体词汇）。语义搜索或不确定时请留空以获取全量记忆，如果使用关键字无结果建议重试无参数方式"
            },
            "random_string": {
              "type": "string",
              "description": "Dummy parameter for no-parameter tools"
            }
          },
          "required": [
            "role",
            "random_string"
          ]
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "mcp__promptx__promptx_remember",
        "description": "💾 [智能记忆存储器] PromptX专业AI记忆体系的核心存储工具\n将重要经验和知识智能处理后永久保存到指定角色的专业记忆库中。\n\n何时使用此工具:\n- 用户分享个人化信息：具体的计划、偏好、背景情况\n- 用户提供项目特定信息：工作内容、进展、配置、决策\n- 用户描述经验性信息：解决问题的方法、遇到的困难、得到的教训\n- 用户进行纠错性信息：对AI回答的修正、补充、澄清\n- 通过工具调用获得新的文件内容、数据查询结果\n- 从互联网获取了训练截止后的最新技术信息\n- 每轮对话结束时识别到有价值的用户特定信息\n\n核心处理能力:\n- 自动识别信息类型并应用对应的奥卡姆剃刀压缩策略\n- 智能生成3-5个语义相关的分类标签避免重复\n- 基于价值评估机制筛选高价值信息存储\n- 支持XML技术内容的转义处理和格式优化\n- 实现角色隔离存储确保专业记忆的独立性\n- 自动去重检测避免冗余记忆的累积\n- 提取最小完整信息保持记忆库的简洁高效\n\n使用前置条件:\n- 必须已通过promptx_action激活PromptX角色\n- 激活后将自动切换到PromptX专业记忆体系\n- 客户端原生记忆功能将被禁用以避免冲突\n- 确保当前角色与要存储的记忆内容匹配\n\n参数详细说明:\n- role: 目标角色ID，记忆将绑定到此专业角色的知识库\n- content: 原始信息内容，工具将自动进行智能优化处理  \n- tags: 可选自定义标签，工具会基于内容自动生成补充标签\n\n🧠 智能记忆判断策略:\n当用户分享以下类型信息时，立即评估记忆价值：\n\n📍 个人化信息：用户的具体计划、偏好、背景情况\n📍 项目特定信息：具体的工作内容、进展、配置、决策\n📍 经验性信息：解决问题的方法、遇到的困难、得到的教训\n📍 纠错性信息：对AI回答的修正、补充、澄清\n\n记忆决策原则:\n- 这是通用知识还是用户特定信息？\n- 这对提升后续服务质量有帮助吗？\n- 不确定时，倾向于记忆而不是遗漏\n\n你应该:\n1. 每轮对话结束时主动评估是否有值得记忆的新信息\n2. 基于语义理解而非关键词匹配来判断记忆价值\n3. 优先记忆大模型训练数据中不存在的私有专业信息\n4. 保持记忆内容的简洁性，核心价值信息优于详细描述\n5. 当不确定是否值得记忆时，倾向于记忆而不是遗漏",
        "parameters": {
          "type": "object",
          "properties": {
            "role": {
              "type": "string",
              "description": "要保存记忆的角色ID，如：java-developer, product-manager, copywriter"
            },
            "content": {
              "type": "string",
              "description": "要保存的重要信息或经验"
            },
            "tags": {
              "type": "string",
              "description": "自定义标签，用空格分隔，可选"
            }
          },
          "required": [
            "role",
            "content"
          ]
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "mcp__promptx__promptx_tool",
        "description": "🔧 [工具执行器] 执行通过@tool协议声明的JavaScript功能工具\n基于PromptX工具生态系统，提供安全可控的工具执行环境。\n\n何时使用此工具:\n- 已通过promptx_learn学习了@manual://工具名并理解其功能\n- 用户明确要求使用某个工具解决具体问题\n- 当前任务正好匹配工具的设计用途\n- 所有必需参数都已准备就绪\n- 确认这是解决问题的最佳工具选择\n\n核心执行能力:\n- 动态加载和执行JavaScript工具模块\n- 自动处理工具依赖的npm包安装\n- 提供隔离的执行沙箱环境\n- 支持异步工具执行和超时控制\n- 完整的错误捕获和友好提示\n- 工具执行状态的实时监控\n- 参数验证和类型检查\n\n使用前置条件:\n- 必须先使用promptx_learn学习@manual://工具名\n- 完全理解工具的功能、参数和返回值格式\n- 确认工具适用于当前的使用场景\n- 准备好所有必需的参数值\n\n执行流程规范:\n1. 识别需求 → 2. learn manual → 3. 理解功能 → 4. 准备参数 → 5. 执行工具\n\n严格禁止:\n- 未学习manual就直接调用工具\n- 基于猜测使用工具\n- 将工具用于非设计用途\n- 忽略工具的使用限制和边界\n\n你应该:\n1. 永远遵循\"先学习后使用\"的原则\n2. 仔细阅读manual中的参数说明和示例\n3. 根据manual中的最佳实践使用工具\n4. 处理工具返回的错误并给出建议\n5. 向用户解释工具的执行过程和结果\n6. 在工具执行失败时参考manual的故障排除\n7. 记录工具使用经验供后续参考\n8. 推荐相关工具形成完整解决方案",
        "parameters": {
          "type": "object",
          "properties": {
            "tool_resource": {
              "type": "string",
              "description": "工具资源引用，格式：@tool://tool-name，如@tool://calculator",
              "pattern": "^@tool://.+"
            },
            "parameters": {
              "type": "object",
              "description": "传递给工具的参数对象"
            },
            "rebuild": {
              "type": "boolean",
              "description": "是否强制重建沙箱（默认false）。用于处理异常情况如node_modules损坏、权限问题等。正常情况下会自动检测依赖变化",
              "default": false
            },
            "timeout": {
              "type": "number",
              "description": "工具执行超时时间（毫秒），默认30000ms",
              "default": 30000
            }
          },
          "required": [
            "tool_resource",
            "parameters"
          ]
        }
      }
    }
  ]
}